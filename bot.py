import logging
import sqlite3
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler
from telegram.ext import filters
from config import BOT_TOKEN, ADMIN_IDS, ARCHIVE_CHANNEL_ID, REQUIRED_CHANNELS, CODES_CHANNEL
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_path="movies.db"):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS movies (
                code TEXT PRIMARY KEY,
                file_id TEXT NOT NULL,
                caption TEXT,
                added_date DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                joined_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_activity DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS channels (
                channel_id INTEGER PRIMARY KEY,
                username TEXT NOT NULL,
                title TEXT
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ config
        for channel_id, username in REQUIRED_CHANNELS.items():
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ username –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ –∏ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            clean_username = username.strip()
            if not clean_username.startswith('@'):
                clean_username = '@' + clean_username
            cursor.execute(
                'INSERT OR IGNORE INTO channels (channel_id, username, title) VALUES (?, ?, ?)',
                (channel_id, clean_username, None)
            )
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def add_movie(self, code, file_id, caption=None):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute('INSERT OR REPLACE INTO movies (code, file_id, caption) VALUES (?, ?, ?)', 
                         (code, file_id, caption))
            conn.commit()
            print(f"‚úÖ –§–∏–ª—å–º #{code} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞: {e}")
            return False
        finally:
            conn.close()
    
    def get_movie(self, code):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT code, file_id, caption FROM movies WHERE code = ?', (code,))
        result = cursor.fetchone()
        conn.close()
        return result
    
    def delete_movie(self, code):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM movies WHERE code = ?', (code,))
        conn.commit()
        conn.close()
        print(f"‚úÖ –§–∏–ª—å–º #{code} —É–¥–∞–ª–µ–Ω")
        return True
    
    def add_user(self, user_id, username=None):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
        conn.commit()
        conn.close()
    
    def update_user_activity(self, user_id):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
    
    def get_all_movies(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT code, caption FROM movies ORDER BY code')
        result = cursor.fetchall()
        conn.close()
        return result
    
    def movie_exists(self, code):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM movies WHERE code = ?', (code,))
        result = cursor.fetchone() is not None
        conn.close()
        return result
    
    def get_all_users(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, username FROM users')
        result = cursor.fetchall()
        conn.close()
        return result
    
    def get_users_count(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM users')
        result = cursor.fetchone()[0]
        conn.close()
        return result
    
    def add_channel(self, channel_id, username, title=None):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        # –ß–∏—Å—Ç–∏–º username –æ—Ç –ª–∏—à–Ω–∏—Ö @
        clean_username = username.strip()
        if clean_username.startswith('@@'):
            clean_username = '@' + clean_username[2:]
        elif not clean_username.startswith('@'):
            clean_username = '@' + clean_username
            
        cursor.execute('INSERT OR REPLACE INTO channels (channel_id, username, title) VALUES (?, ?, ?)', 
                      (channel_id, clean_username, title))
        conn.commit()
        conn.close()
        return True
    
    def get_all_channels(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT channel_id, username, title FROM channels')
        result = cursor.fetchall()
        conn.close()
        return result
    
    def delete_channel(self, channel_id):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM channels WHERE channel_id = ?', (channel_id,))
        conn.commit()
        conn.close()
        return True

db = Database()

async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö"""
    channels = db.get_all_channels()
    not_subscribed = []
    
    for channel_id, username, title in channels:
        try:
            member = await context.bot.get_chat_member(channel_id, user_id)
            if member.status in ['left', 'kicked']:
                not_subscribed.append((channel_id, username, title))
                logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {username}")
            else:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id} ({username}): {e}")
            not_subscribed.append((channel_id, username, title))
    
    return not_subscribed

async def show_subscription_required(update: Update, context: ContextTypes.DEFAULT_TYPE, not_subscribed_channels):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞–Ω–∞–ª—ã"""
    if not not_subscribed_channels:
        return True
    
    keyboard = []
    for channel_id, username, title in not_subscribed_channels:
        channel_name = title or username
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ username –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è URL
        clean_username = username.lstrip('@')
        keyboard.append([InlineKeyboardButton(f"A'zo bolish {channel_name}", url=f"https://t.me/{clean_username}")])
    
    keyboard.append([InlineKeyboardButton("‚úÖ Tekshirish", callback_data="check_subscription")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üì¢ Botdan foydalanish uchun kanallarimizga obuna bo'lishingiz kerak:\n\n" + \
           "\n".join([f"‚Ä¢ {title or username}" for channel_id, username, title in not_subscribed_channels])
    
    try:
        if update.callback_query:
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
        return False
    except Exception as e:
        logger.error(f"Obunani ko'rsatish xatosi: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.add_user(user.id, user.username)
    db.update_user_activity(user.id)
    
    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    if user.id in ADMIN_IDS:
        movies_count = len(db.get_all_movies())
        users_count = db.get_users_count()
        
        await update.message.reply_text(
            f"üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name}!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üé¨ –§–∏–ª—å–º–æ–≤: {movies_count}\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é #–∫–æ–¥ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º"
        )
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã
    not_subscribed = await check_subscription(user.id, context)
    
    if not not_subscribed:
        await update.message.reply_text(
            f"üé¨ Xush kelibsiz, {user.first_name}!\n\n"
            "Kodni kiriting videoni yuklab olish uchun.\n\n"
            f"üì∫ Video kodlarini kanalimizda ko'rishingiz mumkin: {CODES_CHANNEL}"
        )
    else:
        await show_subscription_required(update, context, not_subscribed)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.update_user_activity(user.id)
    
    # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤—Å—ë –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if user.id in ADMIN_IDS:
        text = update.message.text.strip()
        
        if text.isdigit() or re.match(r'^[a-zA-Z0-9]+$', text):
            movie = db.get_movie(text)
            if movie:
                code, file_id, caption = movie
                try:
                    await context.bot.send_video(
                        chat_id=user.id,
                        video=file_id,
                        caption=caption or f"Kod bo'yicha film {code}",
                        protect_content=True
                    )
                except Exception as e:
                    await update.message.reply_text(f"‚ùå Xato: {e}")
            else:
                await update.message.reply_text("‚ùå Film topilmadi")
        return
    
    # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    not_subscribed = await check_subscription(user.id, context)
    if not_subscribed:
        await show_subscription_required(update, context, not_subscribed)
        return
    
    text = update.message.text.strip()
    
    # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥ –±—ã—Å—Ç—Ä–æ)
    not_subscribed = await check_subscription(user.id, context)
    if not_subscribed:
        await show_subscription_required(update, context, not_subscribed)
        return
    
    if text.isdigit() or re.match(r'^[a-zA-Z0-9]+$', text):
        movie = db.get_movie(text)
        if movie:
            code, file_id, caption = movie
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º
                await context.bot.send_video(
                    chat_id=user.id,
                    video=file_id,
                    caption=caption or f"Kod bo'yicha film {code}",
                    protect_content=True
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å –∫–æ–¥–∞–º–∏
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"üì∫ Kodlarini kanalimizda ko'rishingiz mumkin: {CODES_CHANNEL}",
                    disable_web_page_preview=True
                )
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª —Ñ–∏–ª—å–º {code}")
            except Exception as e:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ")
        else:
            await update.message.reply_text(
                f"‚ùå Ushbu kod bilan video topilmadi\n\n"
                f"üì∫ Kodlarini kanalimizda ko'rishingiz mumkin: {CODES_CHANNEL}"
            )
    else:
        try:
            await update.message.delete()
        except:
            pass

async def handle_admin_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –æ—Ç –∞–¥–º–∏–Ω–æ–≤"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        try:
            await update.message.delete()
        except:
            pass
        return
    
    message = update.message
    caption = message.caption or ""
    
    code_match = re.search(r'#(\w+)', caption)
    if not code_match:
        await message.reply_text("‚ùå –î–æ–±–∞–≤—å—Ç–µ –≤ –ø–æ–¥–ø–∏—Å—å –∫–æ–¥ –≤ format–µ #123")
        return
    
    code = code_match.group(1)
    
    file_id = None
    if message.video:
        file_id = message.video.file_id
    elif message.document and message.document.mime_type and 'video' in message.document.mime_type:
        file_id = message.document.file_id
    
    if not file_id:
        await message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ")
        return
    
    try:
        if message.video:
            await context.bot.send_video(
                chat_id=ARCHIVE_CHANNEL_ID,
                video=file_id,
                caption=caption
            )
        else:
            await context.bot.send_document(
                chat_id=ARCHIVE_CHANNEL_ID,
                document=file_id,
                caption=caption
            )
        
        if db.add_movie(code, file_id, caption):
            await message.reply_text(f"‚úÖ –§–∏–ª—å–º #{code} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")
            
    except Exception as e:
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    db.update_user_activity(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã
    not_subscribed = await check_subscription(user.id, context)
    
    if not not_subscribed:
        await query.message.edit_text(
            f"‚úÖ Ajoyib! Endi siz botdan foydalanishingiz mumkin.\n\n"
            "Kodni kiriting videoni yuklab olish uchun.\n\n"
            f"üì∫ Video kodlarini kanalimizda ko'rishingiz mumkin:: {CODES_CHANNEL}"
        )
    else:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤
        try:
            await query.message.delete()
        except:
            pass
        await show_subscription_required(update, context, not_subscribed)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", callback_data="admin_movies")],
        [InlineKeyboardButton("üìå –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_channels")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "admin_stats":
        await show_admin_stats(query)
    elif query.data == "admin_movies":
        await show_movies_management(query)
    elif query.data == "admin_channels":
        await show_channels_management(query)
    elif query.data == "admin_broadcast":
        await query.message.reply_text("üì¢ –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /broadcast")
    elif query.data == "admin_back":
        await admin_panel_callback(query)
    elif query.data == "add_channel":
        await query.message.reply_text(
            "üìù –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/addchannel <id> <@username> [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /addchannel -100123456789 @my_channel \"–ú–æ–π –∫–∞–Ω–∞–ª\""
        )
    elif query.data == "delete_channel":
        await show_delete_channel_menu(query)
    elif query.data.startswith("delete_channel_"):
        await handle_delete_channel(query)

async def show_admin_stats(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    movies_count = len(db.get_all_movies())
    users_count = db.get_users_count()
    channels = db.get_all_channels()
    
    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üé¨ –§–∏–ª—å–º–æ–≤: {movies_count}
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {len(channels)}

–ö–∞–Ω–∞–ª—ã:
"""
    for channel_id, username, title in channels:
        stats_text += f"‚Ä¢ {title or username}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup)

async def show_movies_management(query):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞–º–∏"""
    movies = db.get_all_movies()
    
    if movies:
        movies_text = "üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n\n"
        for code, caption in movies:
            movies_text += f"‚Ä¢ #{code} - {caption[:30]}...\n" if caption else f"‚Ä¢ #{code}\n"
        
        movies_text += f"\nüóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º: /delete <–∫–æ–¥>"
    else:
        movies_text = "üì≠ –§–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(movies_text, reply_markup=reply_markup)

async def show_channels_management(query):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    channels = db.get_all_channels()
    
    channels_text = "üìå –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    if channels:
        for channel_id, username, title in channels:
            channels_text += f"‚Ä¢ {title or username}\n"
    else:
        channels_text += "üì≠ –ö–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    channels_text += "\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="delete_channel")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(channels_text, reply_markup=reply_markup)

async def show_delete_channel_menu(query):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    channels = db.get_all_channels()
    
    if not channels:
        await query.message.reply_text("üì≠ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    keyboard = []
    for channel_id, username, title in channels:
        channel_name = title or username
        keyboard.append([InlineKeyboardButton(f"üóëÔ∏è {channel_name}", callback_data=f"delete_channel_{channel_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_channels")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def handle_delete_channel(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        channel_id = int(query.data.split('_')[2])
        if db.delete_channel(channel_id):
            await query.message.reply_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω!")
            await show_channels_management(query)
        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
    except (ValueError, IndexError):
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def admin_panel_callback(query):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", callback_data="admin_movies")],
        [InlineKeyboardButton("üìå –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_channels")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    if update.message.reply_to_message:
        users = db.get_all_users()
        success = 0
        failed = 0
        
        for user_id, username in users:
            try:
                await update.message.reply_to_message.copy(user_id)
                success += 1
            except:
                failed += 1
        
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")
    else:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")

async def delete_movie_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º –ø–æ –∫–æ–¥—É"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    if context.args:
        code = context.args[0]
        if db.delete_movie(code):
            await update.message.reply_text(f"‚úÖ –§–∏–ª—å–º #{code} —É–¥–∞–ª–µ–Ω")
        else:
            await update.message.reply_text(f"‚ùå –§–∏–ª—å–º #{code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞: /delete <–∫–æ–¥>")

async def add_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    if context.args and len(context.args) >= 2:
        try:
            channel_id = int(context.args[0])
            username = context.args[1]
            title = " ".join(context.args[2:]) if len(context.args) > 2 else None
            
            if db.add_channel(channel_id, username, title):
                await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª @{username} –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
        except ValueError:
            await update.message.reply_text("‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    else:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addchannel <id> <@username> [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /addchannel -100123456789 @my_channel \"–ú–æ–π –∫–∞–Ω–∞–ª\""
        )

async def delete_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    if context.args:
        try:
            channel_id = int(context.args[0])
            if db.delete_channel(channel_id):
                await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except ValueError:
            await update.message.reply_text("‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞: /deletechannel <id>")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("broadcast", broadcast_message))
    application.add_handler(CommandHandler("delete", delete_movie_command))
    application.add_handler(CommandHandler("addchannel", add_channel_command))
    application.add_handler(CommandHandler("deletechannel", delete_channel_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(
        (filters.VIDEO | filters.Document.ALL) & filters.CAPTION,
        handle_admin_video
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(check_subscription_callback, pattern="^check_subscription$"))
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^admin_"))
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^add_channel$"))
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^delete_channel$"))
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^delete_channel_"))
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^admin_back$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üì∫ –ö–æ–¥—ã —Ñ–∏–ª—å–º–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ:", CODES_CHANNEL)
    
    application.run_polling()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", exc_info=context.error)

if __name__ == "__main__":
    main()